workflow:
  rules: &rules
    - if: '$CI_COMMIT_REF_NAME =~ /^v[0-9]+(?:.[0-9]+)+$/'
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == "dev"
    - if: $CI_COMMIT_BRANCH == "master"

variables:
  # MINIMUM FREE SPACE for deploy on root volume in kb
  MINIMUM_FREE_SPACE: 3242880

stages:
  - packages
  - lint
  - test
  - build
  - docker-build
  - deploy

install-packages:
  stage: packages
  image: node:hydrogen-alpine
  script:
    - apk add --no-cache libc6-compat
    - npm install --frozen-lockfile
  artifacts:
    name: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    expire_in: 2 hour
    paths:
      - node_modules/
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: '$CI_COMMIT_REF_NAME =~ /^v[0-9]+(?:.[0-9]+)+$/'
    - if: $CI_COMMIT_BRANCH == "dev"
    - if: $CI_COMMIT_BRANCH == "master"

lint:
  stage: lint
  image: node:hydrogen-alpine
  dependencies:
    - install-packages
  script:
    - yarn lint
  rules:
    - if: $CI_MERGE_REQUEST_IID

test:
  stage: test
  image: node:hydrogen-alpine
  dependencies:
    - install-packages
    - lint
  script:
    - yarn test:ci
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: '$CI_COMMIT_REF_NAME =~ /^v[0-9]+(?:.[0-9]+)+$/'
    - if: $CI_COMMIT_BRANCH == "master"

build:node-dev:
  stage: build
  image: node:hydrogen-alpine
  needs:
    - job: install-packages
      artifacts: true
  script:
    - yarn install --production --ignore-scripts --prefer-offline && npm run build
  artifacts:
    name: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    expire_in: 2 hour
    paths:
      - public/
      - node_modules/
      - package.json
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"


build:node-prod:
  stage: build
  image: node:hydrogen-alpine
  needs:
    - job: install-packages
      artifacts: true
  script:
    - npm run build && yarn install --production --ignore-scripts --prefer-offline
  artifacts:
    name: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    expire_in: 2 hour
    paths:
      - public/
      - node_modules/
      - package.json
  rules:
    - if: $CI_COMMIT_BRANCH == "master"

docker-package-dev:
  stage: docker-build
  image: docker:stable
  services:
    - docker:dind
  dependencies:
    - install-packages
    - build:node-dev
  before_script:
    - echo ${CI_JOB_TOKEN} | docker login -u ${CI_REGISTRY_USER} --password-stdin "$CI_REGISTRY"
  script: |
    set -euo pipefail
    docker build --tag "${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_NAME}" --file docker/Dockerfile ./
    docker push "${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"

docker-package-prod:
  stage: docker-build
  image: docker:stable
  services:
    - docker:dind
  dependencies:
    - install-packages
    - build:node-prod
  before_script:
    - echo ${CI_JOB_TOKEN} | docker login -u ${CI_REGISTRY_USER} --password-stdin "$CI_REGISTRY"
  script: |
    set -euo pipefail
    docker build --tag "${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_NAME}" --file docker/Dockerfile ./
    docker push "${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH == "master"

dev:
  stage: deploy
  dependencies: []
  needs:
    - job: docker-package-dev
      artifacts: false
  cache:
    paths: []
  variables:
    VARIABLES: ${DEV}
    YML_FILE: docker/yml/dev.yml
  script: &deploy_script
    - set -euo pipefail
    - echo "$VARIABLES" > .env
    - ENV_FILE=.env
    - set -o allexport; . $ENV_FILE;
    - rm -rf $ENV_FILE
    - cat ${YML_FILE} > ${SERVER_PATH}/docker-compose.yml
    - ENV_DOMAIN_URL=https://${HOSTNAME}
    - echo ENV_DOMAIN_URL=${ENV_DOMAIN_URL} >> deploy.env
    - cd ${SERVER_PATH}
    - echo "$VARIABLES" > .env
    - sed -i -e "s|project@name|$(echo $CI_PROJECT_NAME | sed 's/\./_/g')|g" "docker-compose.yml"
    - sed -i -e "s|repo@image|$CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME}|g" "docker-compose.yml"
    - sed -i -e "s|example.com|${HOSTNAME}|g" "docker-compose.yml"
    - (exit $(df -lT / | awk -v size=$MINIMUM_FREE_SPACE 'END {print ($5<size?"-1":"0")}')) &&
      echo ${CI_JOB_TOKEN} | docker login -u ${CI_REGISTRY_USER} --password-stdin "$CI_REGISTRY" &&
      docker-compose pull --quiet &&
      docker-compose down -v &&
      docker-compose up -d
  environment:
    name: ${CI_JOB_NAME}
  resource_group: ${CI_JOB_NAME}
  artifacts:
    reports:
      dotenv: deploy.env
  allow_failure: true
  rules:
    - if: $CI_MERGE_REQUEST_IID
      when: never
    - if: '$CI_COMMIT_REF_NAME =~ /^v[0-9]+(?:.[0-9]+)+$/'
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
      when: never
    - if: $CI_COMMIT_BRANCH == "dev"
  tags:
    - 'dev-kratomhelper'

prod:
  stage: deploy
  dependencies: []
  needs:
    - job: docker-package-prod
      artifacts: false
  cache:
    paths: []
  variables:
    VARIABLES: ${PROD}
    YML_FILE: docker/yml/prod.yml
  script: *deploy_script
  environment:
    name: ${CI_JOB_NAME}
  resource_group: ${CI_JOB_NAME}
  artifacts:
    reports:
      dotenv: deploy.env
  allow_failure: true
  rules:
    - if: $CI_MERGE_REQUEST_IID
      when: never
    - if: '$CI_COMMIT_REF_NAME =~ /^v[0-9]+(?:.[0-9]+)+$/'
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
  tags:
    - 'prod-kratomhelper'
